# üê≥ Multi-stage Dockerfile para Sistema de Triagem Psicol√≥gica
# Otimizado para produ√ß√£o com layers m√≠nimas

# ==============================================================================
# üèóÔ∏è STAGE 1: Build Dependencies
# ==============================================================================
FROM node:18-alpine AS dependencies

# Instala depend√™ncias do sistema necess√°rias
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Configura usu√°rio n√£o-root para seguran√ßa
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Define diret√≥rio de trabalho
WORKDIR /app

# Copia arquivos de depend√™ncias
COPY package*.json ./

# Instala depend√™ncias com cache otimizado
RUN npm ci --only=production --silent && \
    npm cache clean --force

# ==============================================================================
# üöÄ STAGE 2: Production Runtime
# ==============================================================================
FROM node:18-alpine AS runtime

# Labels para metadados
LABEL maintainer="triagem-psicologica@example.com"
LABEL version="1.0.0"
LABEL description="Sistema de Triagem Psicol√≥gica - API Node.js + Notion"

# Instala apenas o m√≠nimo necess√°rio
RUN apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Cria usu√°rio n√£o-root
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Define diret√≥rio de trabalho
WORKDIR /app

# Copia depend√™ncias da stage anterior
COPY --from=dependencies --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copia c√≥digo fonte
COPY --chown=nodejs:nodejs src/ ./src/
COPY --chown=nodejs:nodejs package*.json ./

# Cria diret√≥rios necess√°rios
RUN mkdir -p logs && \
    chown -R nodejs:nodejs logs

# Configura vari√°veis de ambiente
ENV NODE_ENV=production
ENV PORT=3000
ENV LOG_LEVEL=info

# Exp√µe porta
EXPOSE 3000

# Muda para usu√°rio n√£o-root
USER nodejs

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Comando de inicializa√ß√£o com dumb-init para gerenciamento correto de sinais
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "src/server.js"]

# ==============================================================================
# üß™ STAGE 3: Development (opcional)
# ==============================================================================
FROM dependencies AS development

# Instala depend√™ncias de desenvolvimento
RUN npm install --silent

# Instala nodemon globalmente
RUN npm install -g nodemon

# Copia c√≥digo fonte
COPY --chown=nodejs:nodejs . .

# Muda para usu√°rio n√£o-root
USER nodejs

# Comando para desenvolvimento
CMD ["npm", "run", "dev"]